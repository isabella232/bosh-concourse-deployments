#!/usr/bin/env bash

set -eu

: ${BOSH_CLIENT:?}
: ${BOSH_CLIENT_SECRET:?}
: ${BOSH_CA_CERT:?}
: ${JUMPBOX_SSH_USER:?}
: ${JUMPBOX_SSH_KEY:?}
: ${VPN_SECRETS:?}

source deployments-src/ci/utils

terraform_metadata="$( realpath terraform/metadata )"
stemcell_version="$( cat stemcell/version )"

export BOSH_ENVIRONMENT="$( jq -r -e .director_internal_ip $terraform_metadata )"

setup_ssh_tunnel \
  "$JUMPBOX_SSH_KEY" \
  "$JUMPBOX_SSH_USER@$( jq -r -e .jumpbox_external_ip $terraform_metadata )"

echo "Uploading OpenVPN release..."
bosh -n --tty upload-release openvpn-release/release.tgz

echo "Uploading Networking release..."
bosh -n --tty upload-release networking-release/release.tgz

echo "Uploading Caddy release..."
bosh -n --tty upload-release caddy-bosh-release/release.tgz

echo "Uploading SSOCA release..."
( cd ssoca; bosh -n --tty upload-release )

echo "Uploading stemcell..."
bosh -n --tty upload-stemcell stemcell/stemcell.tgz

generate_ops_file() {
  local team=${1?'Concourse team is required.'}
  local ops_file=${2?'Ops file is required.'}

  bosh int \
    -v github_team="$team" \
    openvpn-team-ops.yml \
    >> "$ops_file"
}

pushd deployments-src/vpn > /dev/null
  iterate_teams "$( echo "$VPN_SECRETS" | yaml_to_json | jq -r .github_teams )" \
    generate_ops_file /tmp/ssoca-teams-ops.yml

  echo "Deploying OpenVPN Server..."
  bosh -n --tty deploy -d openvpn \
    -v stemcell_version="'$stemcell_version'" \
    -v external_host="$EXTERNAL_HOST" \
    -o /tmp/ssoca-teams-ops.yml \
    -o caddy-ops.yml \
    -l <(echo "${VPN_SECRETS}") \
    -l "$terraform_metadata" \
    --vars-store="you-really-need-this-flag-but-not-this-file.yml" \
    manifest.yml
  echo "Successfully deployed OpenVPN Server!"
popd > /dev/null
